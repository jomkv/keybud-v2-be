// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  googleId   String      @unique
  username   String      @unique
  email      String      @unique
  switchType SwitchType?

  // Relations
  setting                  UserSetting?
  followers                UserFollow[]         @relation("UserFollows")
  followings               UserFollow[]         @relation("UserFollowing")
  statuses                 Status[]
  stars                    StatusStar[]
  reposts                  StatusRepost[]
  sentMessages             Message[]            @relation("SentMessages")
  conversationParticipants ConversationMember[]
}

model UserSetting {
  id             Int     @id @default(autoincrement())
  userId         Int     @unique
  muteAllNotifs  Boolean @default(false)
  messagesNotif  Boolean @default(false)
  followersNotif Boolean @default(false)
  starsNotif     Boolean @default(false)
  repostsNotif   Boolean @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id])
}

model UserFollow {
  id              Int @id @default(autoincrement())
  followerUserId  Int
  followingUserId Int

  // Relations
  followerUser  User @relation("UserFollows", fields: [followerUserId], references: [id])
  followingUser User @relation("UserFollowing", fields: [followingUserId], references: [id])
}

model Status {
  id          Int      @id @default(autoincrement())
  userId      Int
  parentId    Int?
  title       String?
  description String
  createdAt   DateTime @default(now())
  edittedAt   DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id])
  parent   Status?  @relation("StatusReplies", fields: [parentId], references: [id])
  comments Status[] @relation("StatusReplies")

  attachments Attachment[]
  stars       StatusStar[]
  reposts     StatusRepost[]
}

model Attachment {
  id        Int      @id @default(autoincrement())
  statusId  Int
  key       String   @unique
  createdAt DateTime @default(now())

  // Relations 
  status Status @relation(fields: [statusId], references: [id])
}

model StatusStar {
  id       Int @id @default(autoincrement())
  statusId Int
  userId   Int

  // Relations
  status Status @relation(fields: [statusId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model StatusRepost {
  id       Int @id @default(autoincrement())
  statusId Int
  userId   Int

  // Relations
  status Status @relation(fields: [statusId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

enum SwitchType {
  CLICKY
  TACTILE
  LINEAR
}

model Message {
  id             Int       @id @default(autoincrement())
  senderId       Int
  conversationId Int
  content        String // Encrypted
  createdAt      DateTime  @default(now())
  readAt         DateTime?

  // Relations
  sender       User         @relation("SentMessages", fields: [senderId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        Int              @id @default(autoincrement())
  type      ConversationType @default(DIRECT)
  name      String? // For groupchat names
  createdAt DateTime         @default(now())

  // Relations
  members  ConversationMember[]
  messages Message[]
}

// Many-to-Many 
model ConversationMember {
  id             Int      @id @default(autoincrement())
  conversationId Int
  userId         Int
  joinedAt       DateTime @default(now())
  isAdmin        Boolean  @default(false)

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([conversationId, userId])
}

enum ConversationType {
  DIRECT
  GROUP
}
